apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-advanced-template
  title: Advanced Python Project
  description: Template para criar um projeto Python completo com linters, CI/CD, e Docker.
  tags:
    - python
    - advanced
spec:
  owner: user:carlos
  type: service
  parameters:
    - title: Informações do Projeto
      required: [name, description, owner]
      properties:
        name:
          title: Nome do Projeto
          type: string
          description: Nome do projeto Python.
          ui:autofocus: true
        description:
          title: Descrição
          type: string
          description: Breve descrição do projeto
        owner:
          title: Proprietário(s)
          type: string
          description: Proprietário(s) do Projeto
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group
    - title: Escolha o local do projeto
      required: [repoUrl]
      properties:
        repoUrl:
          title: Nome do Repositório
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
          ui:autofocus: true
        useDocker:
          title: Usar Docker?
          type: boolean
          description: Se verdadeiro, inclui o suporte ao Docker.
  steps:
    - id: fetch-base
      name: Criar Estrutura do Projeto
      action: fetch:template
      input:
        url: ./content
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          destinatio: ${{ parseRepoUrl parameters.repoUrl }}
          owner: ${{ parameters.owner }}
    steps:
  # Each step executes an action, in this case one templates files into the working directory.
    # - id: setup
    #   name: Instalar Dependências
    #   action: execute:script
    #   input:
    #     script: |
    #         echo "Configuração das Dependências concluídas"
    #       # python3 -m venv venv
    #       # source venv/bin/activate
    #       # pip install -r requirements.txt
    # - id: ci-cd
    #   name: Configurar CI/CD
    #   action: execute:script
    #   input:
    #     script: |
    #       echo "Configuração do CI concluída"
    # This step publishes the contents of the working directory to GitHub.
  # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: [ 'github.com' ]
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    # Outputs are displayed to the user after a successful execution of the template.
    output:
      links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
