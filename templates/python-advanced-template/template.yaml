apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: python-advanced-template
  title: Advanced Python Project
  description: Template para criar um projeto Python completo com linters, CI/CD, e Docker.
  tags:
    - python
    - advanced
spec:
  owner: user:carlos
  type: service
  parameters:
    - title: Informações do Projeto
      required:
        - name
        - description
        - repoUrl
      properties:
        name:
          title: Nome do Projeto
          type: string
          description: Nome do projeto Python.
        description:
          title: Descrição
          type: string
          description: Breve descrição do projeto.
        repoUrl:
          title: URL do Repositório
          type: string
          description: URL do repositório onde o projeto será armazenado.
        useDocker:
          title: Usar Docker?
          type: boolean
          description: Se verdadeiro, inclui o suporte ao Docker.
  steps:
    - id: fetch-base
      name: Criar Estrutura do Projeto
      action: fetch:template
      input:
        url: ./content
        cookiecutterCompat: true
        values:
          name: ${{ parameters.name }}
    - id: setup
      name: Instalar Dependências
      action: execute:script
      input:
        script: |
            echo "Configuração das Dependências concluídas"
          # python3 -m venv venv
          # source venv/bin/activate
          # pip install -r requirements.txt
    - id: ci-cd
      name: Configurar CI/CD
      action: execute:script
      input:
        script: |
          echo "Configuração do CI concluída"
    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: [ 'github.com' ]
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}
  
    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'
  output:
    links:
    - title: Repository
      url: ${{ steps['publish'].output.remoteUrl }}
    - title: Open in catalog
      icon: catalog
      entityRef: ${{ steps['register'].output.entityRef }}
