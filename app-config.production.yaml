app:
  # Should be the same as backend.baseUrl when using the `app-backend` plugin.
  baseUrl: ${BASEURL_PROD} # http://localhost:7007

backend:
  # Note that the baseUrl should be the URL that the browser and other clients
  # should use when communicating with the backend, i.e. it needs to be
  # reachable not just from within the backend host, but from all of your
  # callers. When its value is "http://localhost:7007", it's strictly private
  # and can't be reached by others.
  reading:
    allow:
    - host: 'gist.githubusercontent.com'
    - host: 'github.com'
    - host: ${BASEURL_PROD}
  baseUrl: ${BASEURL_PROD} # http://localhost:7007
  # The listener can also be expressed as a single <host>:<port> string. In this case we bind to
  # all interfaces, the most permissive setting. The right value depends on your specific deployment.
  listen:
    port: ${PORT_BACKEND}
    # host: 0.0.0.0

  csp:
    connect-src: [ "'self'", "http:", "https:" ]
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false

  cors:
    origin: ${BASEURL_PROD}

  # config options: https://node-postgres.com/apis/client
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DATABASE}

  cache:
    store: memory

copilot:
  scheduler:
    frequency:
      hours: 2
    timeout:
      minutes: 2
    initialDelay:
      seconds: 15
  host: ${YOUR_GITHUB_HOST_HERE}
  enterprise: ${YOUR_ENTERPRISE_NAME_HERE}
  organization: ${YOUR_ORGANIZATION_NAME_HERE}

integrations:
  github:
  - host: github.com
    token: ${GITHUB_TOKEN}
  aws:
    mainAccount:
      profile: carlosrobertodevops
    accounts:
      accountId: ${AWS_ACCOUNT_ID}
      accessKeyId: ${AWS_ACCESS_KEY_ID}
      secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
      region: ${AWS_REGION}
      bucketName: ${BACKSTAGE_BUCKET}
      profile: carlosrobertodevops

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach


# techdocs:
#   builder: 'local'
#   publisher:
#     type: 'local'
#   generator:
#     runIn: local

techdocs:
  #builder: 'external' # Alternatives - 'external'
  # generator:
  #   runIn: 'docker' # Alternatives - 'local'
  # generators:
  #   techdocs: 'docker'
  # generator:
  #   runIn: 'local'
  publisher:
    type: 'awsS3'
    awsS3:
      bucketName: ${TECHDOCS_BUCKET}
      bucketRootPath: '/'
      accountId: ${AWS_ACCOUNT_ID}
      credentials:
        accessKeyId: ${AWS_ACCESS_KEY_ID}
        secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
      region: ${AWS_REGION}

auth:
  environment: production
  providers:
    github:
      production:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

logging:
  level: debug
  format: text
