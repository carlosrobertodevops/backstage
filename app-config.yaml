app:
  title: ${app_title} # Scaffolded Backstage App
  baseUrl: ${BASEURL_LOCAL}:${PORT_APP} # http://localhost:3000

organization:
  name: ${organization_name} # My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  reading:
    allow:
    - host: 'gist.githubusercontent.com'
    - host: 'github.com'
  baseUrl: ${BASEURL_LOCAL}:${PORT_BACKEND} # http://localhost:7007
  listen:
    port: ${PORT_BACKEND}
    host: 0.0.0.0
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: [ "'self'", 'http:', 'https:' ]
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: ${BASEURL_LOCAL}:${PORT_APP}
    methods: [ GET, HEAD, PATCH, POST, PUT, DELETE ]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    # client: better-sqlite3
    # connection: ':memory:'
    # config options: https://node-postgres.com/apis/client
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DATABASE}
    # ensureExists: true
    # pluginDivisionMode: schema
    # plugin:
    #   catalog:
    #     connection:
    #       database: ${POSTGRES_DATABASE}
    #   auth:
    #     connection:
    #       database: ${POSTGRES_DATABASE}
    #   app:
    #     connection:
    #       database: ${POSTGRES_DATABASE}
    #   scaffolder:
    #     connection:
    #       database: ${POSTGRES_DATABASE}
  cache:
    store: memory
    # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
copilot:
  scheduler:
    frequency:
      hours: 2
    timeout:
      minutes: 2
    initialDelay:
      seconds: 15
  host: ${YOUR_GITHUB_HOST_HERE}
  enterprise: ${YOUR_ENTERPRISE_NAME_HERE}
  organization: ${YOUR_ORGANIZATION_NAME_HERE}

integrations:
  github:
  - host: github.com
    # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
    # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
    token: ${GITHUB_TOKEN}
  ### Example for how to add your GitHub Enterprise instance using the API:
  # - host: ghe.example.net
  #   apiBaseUrl: https://ghe.example.net/api/v3
  #   token: ${GHE_TOKEN}
  aws:
    mainAccount:
      profile: carlosrobertodevops
    accounts:
      accountId: ${AWS_ACCOUNT_ID}
      accessKeyId: ${AWS_ACCESS_KEY_ID}
      secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
      region: ${AWS_REGION}
      profile: carlosrobertodevops

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: "local" # Alternatives - 'external'
  generator:
    runIn: "docker" # Alternatives - 'local'
  publisher:
    type: "awsS3"
    awsS3:
      bucketName: ${TECHDOCS_BUCKET}
      region: ${AWS_REGION}
      credentials:
        accessKeyId: ${AWS_ACCESS_KEY_ID}
        secretAccessKey: ${AWS_SECRET_ACCESS_KEY}
# auth:
#   # see https://backstage.io/docs/auth/ to learn about auth providers
#   providers:
#     # See https://backstage.io/docs/auth/guest/provider
#     guest: {}
auth:
  # environment: development
  environment: production
  providers:
    # guest: {}
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        # see https://backstage.io/docs/features/software-templates/configuration for software template options
scaffolder:

catalog:
  orphanStrategy: delete
  providers:
    github:
      # the provider ID can be any camelCase string
      providerId:
        organization: "carlosrobertodevops" # string
        catalogPath: "/catalog-info.yaml" # string
        filters:
          branch: "main" # string
          # repository: '.*' # Regex
          topic:
            include: [ "backstage-include" ] # optional array of strings
            exclude: [ "backstage-exclude" ] # optional array of strings
        schedule:
          # optional; same options as in TaskScheduleDefinition
          # supports cron, ISO duration, "human duration" as used in code
          frequency: { minutes: 30 }
          # supports ISO duration, "human duration" as used in code
          timeout: { minutes: 3 }
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
  - allow: [ Component, System, API, Resource, Location, Group, User, Template ]
  locations:
  # Local example data, file locations are relative to the backend process, typically `packages/backend`
  - type: url
    target: ${CATALOG_ENTITIES_URL} # ../../examples/entities.yaml

  # Local example template
  - type: url
    target: ${CATALOG_TEMPLATE_URL} # ../../examples/template/template.yaml
    # rules:
    # - allow: [ Template ]

    # Local example organizational data
  - type: url
    target: ${CATALOG_ORG_URL} # ../../examples/org.yaml
    # rules:
    # - allow: [ User, Group ]

    # Local example group data
  - type: url
    target: ${CATALOG_GROUP_URL} # ../../examples/group.yaml
    # rules:
    # - allow: [ User, Group ]
    # https://github.com/carlosrobertodevops/backstage/blob/main/
    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

kubernetes: # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true
